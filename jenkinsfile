pipeline {
    agent any
     tools{
        maven "MAVEN_3.9.6"
    }
    stages{
        stage('git'){
            steps{
            git url: 'https://github.com/Pruthviraj0077/spring-petclinic.git',
            branch: 'main'
            }
        }
         stage('build'){
            steps{
                sh "mvn clean package"
                junit testResults: '**/surefire-reports/*xml'
                archive '**/target/spring-petclinic*.jar'
            }
        }
        stage('SonarQube analysis') {
            steps{
                withSonarQubeEnv(credentialsId: 'sonar_cloud', installationName: 'sonarcloud') { 
                sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922:sonar -D sonar.organization=pruthviraj0077 -D sonar.projectKey=Pruthviraj0077_spring-petclinic'
    }
    } 
    }
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        stage ("Artifactory configuration") {
			steps {
				rtServer (
					id: "jfrog-instance",
					url: "https://devopsapril.jfrog.io/artifactory/",
					credentialsId: 'jfog-token', // Set the credentials to your JFrog instance in Jenkins > Configure System > credentials > "username with password" > ID: "rt-cred-id"

 					// bypassProxy: true, (If Jenkins is configured to use an http proxy, you can bypass the proxy when using this Artifactory server)
					// timeout: 300 , (Configure the connection timeout (in seconds). The default value (if not configured) is 300 seconds)
				)
				rtMavenDeployer (
					id: "MAVEN_DEPLOYER",
					serverId: "jfrog-instance",
					releaseRepo: "devops-libs-snapshot-local",
					snapshotRepo: "devops-libs-snapshot-local",

					// threads: 6, (Optional - Attach custom properties to the published artifacts)
					// properties: ['key1=value1', 'key2=value2'], (Optional - Attach custom properties to the published artifacts)
				)

			}
		}

		stage ("Exec Maven") {
			steps {
				rtMavenRun (
					pom: 'pom.xml', // path to pom.xml file
					goals: "clean install",

					deployerId: "MAVEN_DEPLOYER",

					// tool: {build installation name}, (Maven tool installation from jenkins from : Jenkins > Manage jenkins > Global Tool Configuration > Maven installations)
					// useWrapper: true, (Set to true if you'd like the build to use the Maven Wrapper.)
					// opts: '-Xms1024m -Xmx4096m', (Optional - Maven options)
				)
				junit testResults: '**/surefire-reports/*.xml'
			}
		}

		stage ("Publish build info") {
			steps {
				rtPublishBuildInfo (
					serverId: "jfrog-instance",
				)
			}
    
}

        
}
}
